{% comment %}
  Simple Swiper Gallery for Product Variants
  Shows images from variant metafields with responsive settings
{% endcomment %}

{%- assign section_id = section_id | default: section.id -%}

<div class="simple-swiper" id="SimpleSwiper-{{ section_id }}"
     data-desktop-slides="{{ section.settings.desktop_slides_per_view | default: 1 }}"
     data-tablet-slides="{{ section.settings.tablet_slides_per_view | default: 1 }}"
     data-mobile-slides="{{ section.settings.mobile_slides_per_view | default: 1 }}"
     data-desktop-space="{{ section.settings.desktop_space_between | default: 20 }}"
     data-tablet-space="{{ section.settings.tablet_space_between | default: 15 }}"
     data-mobile-space="{{ section.settings.mobile_space_between | default: 10 }}"
     data-enable-pagination="{{ section.settings.enable_pagination | default: true }}"
     data-enable-navigation="{{ section.settings.enable_navigation_arrows | default: true }}">

  <!-- Product data -->
  <script type="application/json" id="ProductData-{{ section_id }}">
  {
    "variants": [
      {%- for variant in product.variants -%}
        {
          "id": {{ variant.id | json }},
          "title": {{ variant.title | json }},
          "images": [
            {%- assign variant_images = variant.metafields.custom.variant_color_images -%}
            {%- if variant_images != blank -%}
              {%- assign images_data = variant_images.value | default: variant_images -%}
              {%- for image_ref in images_data -%}
                {%- if image_ref contains 'files/' -%}
                  {%- assign filename = image_ref | remove: 'files/' -%}
                  {%- assign image_url = filename | file_url -%}
                  {%- unless image_url contains 'https:' -%}
                    {%- if image_url contains '//' -%}
                      {%- assign image_url = 'https:' | append: image_url -%}
                    {%- endif -%}
                  {%- endunless -%}
                  {{ image_url | json }}{%- unless forloop.last -%},{%- endunless -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          ]
        }{%- unless forloop.last -%},{%- endunless -%}
      {%- endfor -%}
    ]
  }
  </script>

  <!-- Simple slider -->
  <div class="swiper-container">
    <div class="swiper-wrapper" id="swiper-slides">
      <!-- Slides generated by JS -->
    </div>
    
    <!-- Navigation -->
    {%- if section.settings.enable_navigation_arrows -%}
      <div class="swiper-nav">
        <button class="swiper-prev" onclick="previousSlide()">‹</button>
        {%- if section.settings.enable_pagination -%}
          <div class="swiper-pagination" id="pagination"></div>
        {%- endif -%}
        <button class="swiper-next" onclick="nextSlide()">›</button>
      </div>
    {%- elsif section.settings.enable_pagination -%}
      <div class="swiper-nav">
        <div class="swiper-pagination" id="pagination"></div>
      </div>
    {%- endif -%}
  </div>
</div>

<style>
.simple-swiper {
  position: relative;
  max-width: 100%;
  --slides-per-view: 1;
  --space-between: 10px;
}

.swiper-container {
  overflow: hidden;
  border-radius: 8px;
}

.swiper-wrapper {
  display: flex;
  transition: transform 0.3s ease;
  gap: var(--space-between);
}

.swiper-slide {
  flex: 0 0 calc((100% - (var(--slides-per-view) - 1) * var(--space-between)) / var(--slides-per-view));
  display: flex;
  align-items: center;
  justify-content: center;
}

.swiper-slide img {
  max-width: 100%;
  height: auto;
  display: block;
  border-radius: 4px;
}

.swiper-nav {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-top: 15px;
}

.swiper-prev, .swiper-next {
  background: #333;
  color: white;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  font-size: 18px;
  transition: background 0.2s ease;
}

.swiper-prev:hover, .swiper-next:hover {
  background: #555;
}

.swiper-pagination {
  display: flex;
  gap: 8px;
  align-items: center;
}

.pagination-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: #ccc;
  cursor: pointer;
  transition: all 0.2s ease;
}

.pagination-dot.active {
  background: #333;
  transform: scale(1.2);
}

.pagination-dot:hover {
  background: #666;
}

/* Responsive breakpoints */
@media screen and (min-width: 750px) {
  .simple-swiper[data-tablet-slides] {
    --slides-per-view: var(--tablet-slides);
    --space-between: var(--tablet-space);
  }
}

@media screen and (min-width: 990px) {
  .simple-swiper[data-desktop-slides] {
    --slides-per-view: var(--desktop-slides);
    --space-between: var(--desktop-space);
  }
}
</style>

<script>
let currentSlide = 0;
let totalSlides = 0;
let currentVariantImages = [];
let swiperSettings = {
  slidesPerView: 1,
  spaceBetween: 10,
  enablePagination: true,
  enableNavigation: true
};

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  initializeSwiper();
  
  // Load first variant by default
  const firstVariantId = document.querySelector('input[name="id"]')?.value;
  if (firstVariantId) {
    loadVariantImages(firstVariantId);
  }
  
  // Also watch for variant selector changes
  watchVariantSelectors();
  
  // Update on resize
  window.addEventListener('resize', updateResponsiveSettings);
});

function initializeSwiper() {
  const container = document.querySelector('.simple-swiper');
  if (!container) return;
  
  // Get settings from data attributes
  const desktopSlides = parseInt(container.dataset.desktopSlides) || 1;
  const tabletSlides = parseInt(container.dataset.tabletSlides) || 1;
  const mobileSlides = parseInt(container.dataset.mobileSlides) || 1;
  const desktopSpace = parseInt(container.dataset.desktopSpace) || 20;
  const tabletSpace = parseInt(container.dataset.tabletSpace) || 15;
  const mobileSpace = parseInt(container.dataset.mobileSpace) || 10;
  
  swiperSettings.enablePagination = container.dataset.enablePagination === 'true';
  swiperSettings.enableNavigation = container.dataset.enableNavigation === 'true';
  
  // Store responsive settings
  swiperSettings.responsive = {
    mobile: { slidesPerView: mobileSlides, spaceBetween: mobileSpace },
    tablet: { slidesPerView: tabletSlides, spaceBetween: tabletSpace },
    desktop: { slidesPerView: desktopSlides, spaceBetween: desktopSpace }
  };
  
  updateResponsiveSettings();
}

function updateResponsiveSettings() {
  const container = document.querySelector('.simple-swiper');
  if (!container || !swiperSettings.responsive) return;
  
  let currentSettings;
  
  // Determine current breakpoint
  if (window.innerWidth >= 990) {
    currentSettings = swiperSettings.responsive.desktop;
  } else if (window.innerWidth >= 750) {
    currentSettings = swiperSettings.responsive.tablet;
  } else {
    currentSettings = swiperSettings.responsive.mobile;
  }
  
  swiperSettings.slidesPerView = currentSettings.slidesPerView;
  swiperSettings.spaceBetween = currentSettings.spaceBetween;
  
  // Update CSS custom properties
  container.style.setProperty('--slides-per-view', swiperSettings.slidesPerView);
  container.style.setProperty('--space-between', swiperSettings.spaceBetween + 'px');
  
  // Update breakpoint-specific custom properties for CSS
  container.style.setProperty('--mobile-slides', swiperSettings.responsive.mobile.slidesPerView);
  container.style.setProperty('--tablet-slides', swiperSettings.responsive.tablet.slidesPerView);
  container.style.setProperty('--desktop-slides', swiperSettings.responsive.desktop.slidesPerView);
  container.style.setProperty('--mobile-space', swiperSettings.responsive.mobile.spaceBetween + 'px');
  container.style.setProperty('--tablet-space', swiperSettings.responsive.tablet.spaceBetween + 'px');
  container.style.setProperty('--desktop-space', swiperSettings.responsive.desktop.spaceBetween + 'px');
  
  // Recalculate if slides are already loaded
  if (currentVariantImages.length > 0) {
    updateSlidePosition();
    updateNavigation();
  }
}

// Listen for variant changes from product forms
document.addEventListener('shopify:variant:change', function(event) {
  const variantId = event.detail.variant.id;

  loadVariantImages(variantId);
});

// Watch for changes in variant selectors (radios, selects, etc.)
function watchVariantSelectors() {
  // Watch variant ID input
  const variantInput = document.querySelector('input[name="id"]');
  if (variantInput) {
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
          const newVariantId = variantInput.value;

          loadVariantImages(newVariantId);
        }
      });
    });
    observer.observe(variantInput, { attributes: true });
  }
  
  // Watch all variant option inputs (radio buttons, selects)
  const variantOptions = document.querySelectorAll('input[name*="options"], select[name*="options"]');
  variantOptions.forEach(function(input) {
    input.addEventListener('change', function() {
      // Small delay to let Shopify update the variant ID
      setTimeout(function() {
        const currentVariantId = document.querySelector('input[name="id"]')?.value;
        if (currentVariantId) {

          loadVariantImages(currentVariantId);
        }
      }, 100);
    });
  });
}

function loadVariantImages(variantId) {
  // Get product data
  const dataScript = document.querySelector('[id*="ProductData-"]');
  if (!dataScript) return;
  
  try {
    const productData = JSON.parse(dataScript.textContent);
    const variant = productData.variants.find(v => v.id == variantId);
    
    if (!variant || !variant.images.length) {

      return;
    }
    

    
    currentVariantImages = variant.images;
    totalSlides = variant.images.length;
    currentSlide = 0;
    
    renderSlides();
    updatePagination();
    updateNavigation();
    
  } catch (e) {

  }
}

function renderSlides() {
  const container = document.getElementById('swiper-slides');
  container.innerHTML = '';
  
  currentVariantImages.forEach((imageUrl, index) => {
    const slide = document.createElement('div');
    slide.className = 'swiper-slide';
    slide.innerHTML = `<img src="${imageUrl}" alt="Product image ${index + 1}" loading="${index > 0 ? 'lazy' : 'eager'}">`;
    container.appendChild(slide);
  });
  
  updateSlidePosition();
}

function updateSlidePosition() {
  const container = document.getElementById('swiper-slides');
  const slideWidth = 100 / swiperSettings.slidesPerView;
  const translateX = -currentSlide * slideWidth;
  container.style.transform = `translateX(${translateX}%)`;
}

function updatePagination() {
  if (!swiperSettings.enablePagination) return;
  
  const pagination = document.getElementById('pagination');
  if (!pagination) return;
  
  pagination.innerHTML = '';
  
  const totalPages = Math.ceil(totalSlides / swiperSettings.slidesPerView);
  const currentPage = Math.floor(currentSlide / swiperSettings.slidesPerView);
  
  for (let i = 0; i < totalPages; i++) {
    const dot = document.createElement('div');
    dot.className = `pagination-dot ${i === currentPage ? 'active' : ''}`;
    dot.onclick = () => goToPage(i);
    pagination.appendChild(dot);
  }
}

function updateNavigation() {
  if (!swiperSettings.enableNavigation) return;
  
  const prevBtn = document.querySelector('.swiper-prev');
  const nextBtn = document.querySelector('.swiper-next');
  
  if (!prevBtn || !nextBtn) return;
  
  const maxSlide = Math.max(0, totalSlides - swiperSettings.slidesPerView);
  
  prevBtn.disabled = currentSlide <= 0;
  nextBtn.disabled = currentSlide >= maxSlide;
  
  prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';
  nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';
}

function previousSlide() {
  if (currentSlide > 0) {
    currentSlide = Math.max(0, currentSlide - swiperSettings.slidesPerView);
    updateSlidePosition();
    updatePagination();
    updateNavigation();
  }
}

function nextSlide() {
  const maxSlide = Math.max(0, totalSlides - swiperSettings.slidesPerView);
  if (currentSlide < maxSlide) {
    currentSlide = Math.min(maxSlide, currentSlide + swiperSettings.slidesPerView);
    updateSlidePosition();
    updatePagination();
    updateNavigation();
  }
}

function goToPage(pageIndex) {
  currentSlide = pageIndex * swiperSettings.slidesPerView;
  updateSlidePosition();
  updatePagination();
  updateNavigation();
}
</script>
